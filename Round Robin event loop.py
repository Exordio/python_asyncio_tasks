# -*- coding: utf-8 -*-
# Прежде всего генератор, это функция который даёт результат...
# yield возвращает генератор

# 1. Генераторы это функции! это не просто объект, а функция которая выполняется, это не просто список.
# Генераторы важно рассматривать, не только с точки зрения генерации каких то данных
# А с точки зрения передачи контроля управления программы
# 2. Инструкций yield может быть несколько, и код после yield 
# так же выполняется при след вызове функции next()

# Round Robin event loop можно проиллюстрировать на следующем примере:
# Представляем что мы хотим на огороде сделать бассеин, мы выкопали яму
# А вода есть только в бассейне у наших соседей

# Наша задача сводится к тому чтобы вычерпать воду у наших соседей, и перелить в нашу яму
# Мы организовываем друзей, и они все по очереди берут одно ведро и несут воду в нашу яму
# Человек который первый нес воду, относит её передаёт ведро человеку после себя и встаёт в конец очереди.
# Цикл повторяется до того момента пока работа не будет выполнена.


#import random
from time import time

def gen(s):
    for i in s:
        yield i+i;
        
#g = gen('oleg')

#for i in g:
    #print(i)

#x = [random.randint(0, 10) for x in range(10)]
#print(x)

def gen_filename():
    while True:
        pattern = 'file-{}.jpeg'
        t = int(time() * 1000)
        yield pattern.format(str(t))
        
        strings = "uhh"
        print(strings)

g = gen_filename()
